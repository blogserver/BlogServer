<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.opensource.soft.BlogServer.user.user.dao.UserMapper">

	<resultMap id="BaseResultMap" type="com.opensource.soft.BlogServer.user.user.model.User">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="loginname" jdbcType="VARCHAR" property="loginname" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="salt" jdbcType="VARCHAR" property="salt" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="nickname" jdbcType="VARCHAR" property="nickname" />
		<result column="photo" jdbcType="VARCHAR" property="photo" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="email" jdbcType="VARCHAR" property="email" />
		<result column="createTime" javaType="java.sql.Timestamp" property="createTime"/>
		<result column="updateTime" javaType="java.sql.Timestamp" property="updateTime"/>
	</resultMap>

	<sql id="Base_Column_List">
		id, loginname, password, salt, status, nickname, photo, phone, email, createTime, updateTime
	</sql>

	<select id="selectByUserId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		where id = #{id,jdbcType=INTEGER}
	</select>

	<select id="selectByLoginname" parameterType="java.lang.String" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		where loginname = #{loginname,jdbcType=VARCHAR}
	</select>

	<delete id="deleteByUserId" parameterType="java.lang.Integer">
		delete from user
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<insert id="insert" parameterType="com.opensource.soft.BlogServer.user.user.model.User">
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into user (loginname, password, salt,
		status, nickname, photo,
		phone, email, createTime,
		updateTime)
		values (#{loginname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR},
		#{status,jdbcType=INTEGER}, #{nickname,jdbcType=VARCHAR}, #{photo,jdbcType=VARCHAR},
		#{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},#{createTime,jdbcType=TIMESTAMP},
		#{updateTime,jdbcType=TIMESTAMP})
	</insert>

	<update id="updateByUserId" parameterType="com.opensource.soft.BlogServer.user.user.model.User">
		update user
		<set>
			<if test="loginname != null">
				loginname = #{loginname,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="salt != null">
				salt = #{salt,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="nickname != null">
				nickname = #{nickname,jdbcType=VARCHAR},
			</if>
			<if test="photo != null">
				photo = #{photo,jdbcType=VARCHAR},
			</if>
			<if test="phone != null">
				phone = #{phone,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				createTime = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="updateTime != null">
				updateTime = #{updateTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

</mapper>